//*****************************************************************************
//*****************************************************************************
//  FILENAME: filtre1.h
//   Version: 5.5, Updated on 2009/10/9 at 10:6:29
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION: C declarations for the BPF2 User Module.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

#pragma fastcall16 filtre1_Start
#pragma fastcall16 filtre1_SetPower
#pragma fastcall16 filtre1_Stop
#pragma fastcall16 filtre1_SetC1
#pragma fastcall16 filtre1_SetC2
#pragma fastcall16 filtre1_SetC3
#pragma fastcall16 filtre1_SetC4
#pragma fastcall16 filtre1_SetCA
#pragma fastcall16 filtre1_SetCB
#pragma fastcall16 filtre1_SetPolarity


//-------------------------------------------------
// Prototypes of the filtre1 API.
//-------------------------------------------------

extern void filtre1_Start(BYTE bPowerSetting);
extern void filtre1_SetPower(BYTE bPowerSetting);
extern void filtre1_Stop(void);
extern void filtre1_SetC1(BYTE bCapValue);
extern void filtre1_SetC2(BYTE bCapValue);
extern void filtre1_SetC3(BYTE bCapValue);
extern void filtre1_SetC4(BYTE bCapValue);
extern void filtre1_SetCA(BYTE bCapValue);
extern void filtre1_SetCB(BYTE bCapValue);
extern void filtre1_SetPolarity(BYTE bPolaritySetting);


//-------------------------------------------------
// Defines for filtre1 API's.
//-------------------------------------------------

#define filtre1_OFF                              (0x00)
#define filtre1_LOWPOWER                         (0x01)
#define filtre1_MEDPOWER                         (0x02)
#define filtre1_HIGHPOWER                        (0x03)

#define filtre1_FEEDBACK_16                      (0x00)
#define filtre1_FEEDBACK_32                      (0x01)

#define filtre1_POLARITY_INVERTING               (0x00)
#define filtre1_POLARITY_NON_INVERTING           (0x01)

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

#pragma ioport  filtre1_FLIN_CR0:   0x080                       //Analog SCA control register 0
BYTE            filtre1_FLIN_CR0;
#pragma ioport  filtre1_FLIN_CR1:   0x081                       //Analog SCA control register 1
BYTE            filtre1_FLIN_CR1;
#pragma ioport  filtre1_FLIN_CR2:   0x082                       //Analog SCA control register 2
BYTE            filtre1_FLIN_CR2;
#pragma ioport  filtre1_FLIN_CR3:   0x083                       //Analog SCA control register 3
BYTE            filtre1_FLIN_CR3;
#pragma ioport  filtre1_FLFB_CR0:   0x090                       //Analog SCB control register 0
BYTE            filtre1_FLFB_CR0;
#pragma ioport  filtre1_FLFB_CR1:   0x091                       //Analog SCB control register 1
BYTE            filtre1_FLFB_CR1;
#pragma ioport  filtre1_FLFB_CR2:   0x092                       //Analog SCB control register 2
BYTE            filtre1_FLFB_CR2;
#pragma ioport  filtre1_FLFB_CR3:   0x093                       //Analog SCB control register 3
BYTE            filtre1_FLFB_CR3;

//  filtre1 Cap naming convention per Gregorian and Temes, p293

#pragma ioport  filtre1_FILT_C1_REG:    0x080
BYTE            filtre1_FILT_C1_REG;
#pragma ioport  filtre1_FILT_C2_REG:    0x081
BYTE            filtre1_FILT_C2_REG;
#pragma ioport  filtre1_FILT_C3_REG:    0x090
BYTE            filtre1_FILT_C3_REG;
#pragma ioport  filtre1_FILT_C4_REG:    0x082
BYTE            filtre1_FILT_C4_REG;
#pragma ioport  filtre1_FILT_CA_REG:    0x080
BYTE            filtre1_FILT_CA_REG;
#pragma ioport  filtre1_FILT_CB_REG:    0x090
BYTE            filtre1_FILT_CB_REG;


// end of file filtre1.h
