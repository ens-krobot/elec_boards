//*****************************************************************************
//*****************************************************************************
//  FILENAME: declencheur.h
//   Version: 2.6, Updated on 2009/10/15 at 17:11:37
//  Generated by PSoC Designer 5.0.1127.0
//
//  DESCRIPTION: Timer16 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

#pragma fastcall16 declencheur_EnableInt
#pragma fastcall16 declencheur_DisableInt
#pragma fastcall16 declencheur_Start
#pragma fastcall16 declencheur_Stop
#pragma fastcall16 declencheur_wReadTimer                // Read  DR0
#pragma fastcall16 declencheur_wReadTimerSaveCV          // Read  DR0      
#pragma fastcall16 declencheur_WritePeriod               // Write DR1
#pragma fastcall16 declencheur_wReadCompareValue         // Read  DR2
#pragma fastcall16 declencheur_WriteCompareValue         // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 wdeclencheur_ReadCounter              // Read  DR0 "Obsolete"
#pragma fastcall16 wdeclencheur_CaptureCounter           // Read  DR0 "Obsolete"
#pragma fastcall16 wdeclencheur_ReadTimer                // Read  DR0 (Deprecated)
#pragma fastcall16 wdeclencheur_ReadTimerSaveCV          // Read  DR0 (Deprecated)
#pragma fastcall16 wdeclencheur_ReadCompareValue         // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the declencheur API.
//-------------------------------------------------

extern void declencheur_EnableInt(void);                           // Proxy 1
extern void declencheur_DisableInt(void);                          // Proxy 1
extern void declencheur_Start(void);                               // Proxy 1
extern void declencheur_Stop(void);                                // Proxy 1
extern WORD declencheur_wReadTimer(void);                          // Proxy 1
extern WORD declencheur_wReadTimerSaveCV(void);                    // Proxy 2
extern void declencheur_WritePeriod(WORD wPeriod);                 // Proxy 1
extern WORD declencheur_wReadCompareValue(void);                   // Proxy 1
extern void declencheur_WriteCompareValue(WORD wCompareValue);     // Proxy 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern WORD wdeclencheur_ReadCompareValue(void);       // Deprecated
extern WORD wdeclencheur_ReadTimerSaveCV(void);        // Deprecated
extern WORD wdeclencheur_ReadCounter(void);            // Obsolete
extern WORD wdeclencheur_ReadTimer(void);              // Deprecated
extern WORD wdeclencheur_CaptureCounter(void);         // Obsolete


//--------------------------------------------------
// Constants for declencheur API's.
//--------------------------------------------------

#define declencheur_CONTROL_REG_START_BIT      ( 0x01 )
#define declencheur_INT_REG_ADDR               ( 0x0e1 )
#define declencheur_INT_MASK                   ( 0x20 )


//--------------------------------------------------
// Constants for declencheur user defined values
//--------------------------------------------------

#define declencheur_PERIOD                     ( 0xea60 )
#define declencheur_COMPARE_VALUE              ( 0x0 )


//-------------------------------------------------
// Register Addresses for declencheur
//-------------------------------------------------

#pragma ioport  declencheur_COUNTER_LSB_REG:    0x030      //Count register LSB
BYTE            declencheur_COUNTER_LSB_REG;
#pragma ioport  declencheur_COUNTER_MSB_REG:    0x034      //Count register MSB
BYTE            declencheur_COUNTER_MSB_REG;
#pragma ioport  declencheur_PERIOD_LSB_REG: 0x031          //Period register LSB
BYTE            declencheur_PERIOD_LSB_REG;
#pragma ioport  declencheur_PERIOD_MSB_REG: 0x035          //Period register MSB
BYTE            declencheur_PERIOD_MSB_REG;
#pragma ioport  declencheur_COMPARE_LSB_REG:    0x032      //Compare register LSB
BYTE            declencheur_COMPARE_LSB_REG;
#pragma ioport  declencheur_COMPARE_MSB_REG:    0x036      //Compare register MSB
BYTE            declencheur_COMPARE_MSB_REG;
#pragma ioport  declencheur_CONTROL_LSB_REG:    0x033      //Control register LSB
BYTE            declencheur_CONTROL_LSB_REG;
#pragma ioport  declencheur_CONTROL_MSB_REG:    0x037      //Control register MSB
BYTE            declencheur_CONTROL_MSB_REG;
#pragma ioport  declencheur_FUNC_LSB_REG:   0x130          //Function register LSB
BYTE            declencheur_FUNC_LSB_REG;
#pragma ioport  declencheur_FUNC_MSB_REG:   0x134          //Function register MSB
BYTE            declencheur_FUNC_MSB_REG;
#pragma ioport  declencheur_INPUT_LSB_REG:  0x131          //Input register LSB
BYTE            declencheur_INPUT_LSB_REG;
#pragma ioport  declencheur_INPUT_MSB_REG:  0x135          //Input register MSB
BYTE            declencheur_INPUT_MSB_REG;
#pragma ioport  declencheur_OUTPUT_LSB_REG: 0x132          //Output register LSB
BYTE            declencheur_OUTPUT_LSB_REG;
#pragma ioport  declencheur_OUTPUT_MSB_REG: 0x136          //Output register MSB
BYTE            declencheur_OUTPUT_MSB_REG;
#pragma ioport  declencheur_INT_REG:       0x0e1           //Interrupt Mask Register
BYTE            declencheur_INT_REG;


//-------------------------------------------------
// declencheur Macro 'Functions'
//-------------------------------------------------

#define declencheur_Start_M \
   ( declencheur_CONTROL_LSB_REG |=  declencheur_CONTROL_REG_START_BIT )

#define declencheur_Stop_M  \
   ( declencheur_CONTROL_LSB_REG &= ~declencheur_CONTROL_REG_START_BIT )

#define declencheur_EnableInt_M   \
   M8C_EnableIntMask(  declencheur_INT_REG, declencheur_INT_MASK )

#define declencheur_DisableInt_M  \
   M8C_DisableIntMask( declencheur_INT_REG, declencheur_INT_MASK )


// end of file declencheur.h


